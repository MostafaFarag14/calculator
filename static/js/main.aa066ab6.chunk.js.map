{"version":3,"sources":["components/app/App.js","components/num/num.js","components/result/result.js","serviceWorker.js","index.js"],"names":["App","props","evaluate","eval","state","result","e","getClicked","num","evaluated","setState","concat","toString","length","match","className","this","onclick","React","Component","Num","handleClick","target","innerText","parse","item","parseInt","x","map","row","index","key","col","array","isNaN","onClick","Result","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gmDAIMA,I,2BACJ,aAAYC,OAAO,IAAD,sNAChB,maAAMA,QADU,MAQlBC,SAAW,WACT,IACE,OAAOC,KAAK,MAAKC,MAAMC,QAEzB,MAAOC,GACL,MAAO,UAbO,MAgBlBC,WAAa,SAACC,GACT,MAAKJ,MAAMK,UAAY,MAAKC,SAAS,CAACL,OAAQG,EAAMC,WAAW,IAC7D,MAAKC,SAAS,CAACL,OAAQ,MAAKD,MAAMC,OAAOM,OAAOH,KAE1C,MAARA,GACD,MAAKE,SAAS,CAACL,OAAQ,MAAKH,WAAWU,aAG9B,MAARJ,GACD,MAAKE,SAAS,CAACL,OAAO,IAAKI,WAAU,IAE5B,OAARD,GACE,MAAKJ,MAAMC,OAAO,MAAKD,MAAMC,OAAOQ,OAAO,GAAGC,MAAM,UACrD,MAAKJ,SAAS,CAACL,OAAQ,SAAC,MAAKH,WAAY,GAAGU,cA3BhD,MAAKR,MAAQ,CACXC,OAAQ,IACRI,WAAW,GAJG,M,sbAkChB,OACE,kEAAKM,UAAU,6CACb,2DAAC,8CAAD,CAAQV,OAAQW,KAAKZ,MAAMC,SAC3B,2DAAC,wCAAD,CAAKY,QAASD,KAAKT,kB,KAtCTW,6CAAMC,WA6CTnB,2B,sHC/CFoB,G,MAAb,2MAEEC,YAAc,SAACf,GACb,EAAKL,MAAMgB,QAAQX,EAAEgB,OAAOC,YAHhC,EAMEC,MAAQ,SAACC,GACP,IACE,OAAOC,SAASD,GAElB,SACE,MAAO,UAXb,wEAcY,IAAD,OAOHE,EAAI,sBACR,MAPgB,CAAE,CAAC,IAAK,KAAM,IAAK,KACnC,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,MAIDC,KACN,SAACC,EAAIC,GACH,OACE,yBAAKf,UAAU,MAAMgB,IAAKD,GACvBD,EAAID,KACH,SAACI,EAAKF,EAAOG,GAgBX,OAdEN,EADqB,IAApB,EAAKH,MAAMQ,GACR,6BAGDE,MAAM,EAAKV,MAAMQ,KAAiB,MAARA,EAEvB,yDAGA,2BAON,uBAAGjB,UAAWY,EAAGI,IAAKD,EAAOK,QAAS,EAAKd,aACxCW,cA9CvB,GAAyBd,IAAMC,a,sHCAlBiB,G,MAAb,iLAEA,OACE,yBAAKrB,UAAU,0BACT,yBAAKA,UAAU,iCAAiCC,KAAKf,MAAMI,aAJnE,GAA4Ba,IAAMC,a,oMCUdkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCZN2B,IAASC,OAAO,kBAAC1C,EAAA,EAAD,MAAS2C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa066ab6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Num} from '../num/num'\nimport {Result} from '../result/result'\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      result: '0',\n      evaluated: true\n    }\n  }\n\n  evaluate = () =>{\n    try{\n      return eval(this.state.result)\n    }\n    catch (e){\n      return 'ERROR'\n    }\n  }\n  getClicked = (num) => {\n    if(this.state.evaluated) {this.setState({result: num , evaluated: false})}\n    else{this.setState({result: this.state.result.concat(num)})}\n\n    if(num === '='){\n      this.setState({result: this.evaluate().toString()})\n    }\n\n    if(num === 'C'){\n      this.setState({result:'0', evaluated:true})\n    }\n    if(num === '^2'){\n      if(this.state.result[this.state.result.length-1].match(/[0-9]/)){\n        this.setState({result: (this.evaluate()**2).toString()})\n      }\n    }\n  }\n  render(){\n    return (\n      <div className=\"App container my-5 mx-auto w-25 shadow-lg\" >\n        <Result result={this.state.result}/>\n        <Num onclick={this.getClicked}/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react'\r\nimport './num.css'\r\nexport class Num extends React.Component {\r\n\r\n  handleClick = (e) => {\r\n    this.props.onclick(e.target.innerText)\r\n  }\r\n\r\n  parse = (item) => {\r\n    try {\r\n      return parseInt(item)\r\n    }\r\n    catch {\r\n      return 'ERROR'\r\n    }\r\n  }\r\n  render() {\r\n    const numList = [ ['C', '^2', '%', '/'],\r\n    ['7', '8', '9', '*'],\r\n    ['4', '5', '6', '-'],\r\n    ['1', '2', '3', '+'],\r\n    ['0', '.', '=']\r\n    ]\r\n    let x = 'col border bg-light'\r\n    return (\r\n      numList.map(\r\n        (row,index) => {\r\n          return (\r\n            <div className=\"row\" key={index}>\r\n              {row.map(\r\n                (col, index, array) => {\r\n                  if(this.parse(col) === 0){\r\n                    x = 'col-6 border bg-light py-2'\r\n                  }\r\n                  else{\r\n                    if(isNaN(this.parse(col)) && col !== '.')\r\n                    {\r\n                      x = 'col border bg-warning text-white py-2 font-weight-bold'\r\n                    }\r\n                    else{\r\n                      x = 'col border bg-light py-2'\r\n                    }\r\n                  }\r\n\r\n                  \r\n                  \r\n                  return (\r\n                    <a className={x} key={index} onClick={this.handleClick}>\r\n                      {col}\r\n                    </a>\r\n                  )\r\n                }\r\n              )}\r\n            </div>)\r\n        }\r\n      )\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './result.css'\r\nexport class Result extends React.Component {\r\nrender(){\r\nreturn (\r\n  <div className=\"row bg-dark text-light\" >\r\n        <div className=\"col py-3 text-right display-4\">{this.props.result}</div>\r\n      </div>\r\n)\r\n}\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}